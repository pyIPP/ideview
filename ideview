#!/usr/bin/env python

import os, sys, numpy as np, matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
from matplotlib.figure import Figure
from IPython import embed

import dd_20140722 as dd

import Tkinter as tk

class backend(object):
    def __init__(self, shot):
        print "loading new data"
        idf = dd.shotfile('IDF', shot, 'ABOCK')
        self.time = idf('time')
        self.qsa = idf('q_sa')
        self.qsaplu = idf('q_sa_plu')
        self.qsamin = idf('q_sa_min')
    
    def getPlots(self, time):
        index = np.abs(self.time - time).argmin()
        return [
            (self.qsa.area.data[index],    -self.qsa.data[index]),
            (self.qsaplu.area.data[index], -self.qsaplu.data[index]),
           # (self.qsamin.area.data[index], -self.qsamin.data[index]),
        ]

class view(tk.Tk):
    backend = None

    def __init__(self,parent):
        tk.Tk.__init__(self,parent)
        self.parent = parent
        self.initialize()

    def initialize(self):
        #self.grid()

        topframe = tk.Frame(self)
        topframe.pack(side=tk.TOP, fill=tk.X)

        label = tk.Label(topframe, text="Shot:")
        label.pack(side=tk.LEFT)

        self.entryShot = tk.Entry(topframe)
        self.entryShot.pack(side=tk.LEFT)
        self.entryShot.insert(0, "31113")

        button = tk.Button(topframe,text=u"Load", command=self.onLoadButtonClick)
        button.pack(side=tk.LEFT)

        self.timeslider1 = tk.Scale(topframe,orient="horizontal", command=self.scaleUpdated)
        self.timeslider1.pack(side=tk.LEFT, fill=tk.X, expand=1)

        self.viewfig = Figure()
        self.canvas = FigureCanvasTkAgg(self.viewfig, master=self)
        self.canvas.show()
        self.canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)

        toolbar = NavigationToolbar2TkAgg( self.canvas, self)
        toolbar.update()

        toolframe = tk.Frame(self, height=45)
        toolframe.pack_propagate(0)
        toolframe.pack(side=tk.TOP,fill=tk.X)


        self.geometry("800x600")

    def onLoadButtonClick(self):
        self.load(self.entryShot.get())

    def load(self, shot):
        self.backend = backend(int(shot))
        t = self.backend.time
        self.timeslider1.configure(from_=t.min(), to=t.max(), resolution=t[1]-t[0])
         
        self.updatePlots()

    def updatePlots(self):
        self._job = None

        if self.backend == None:
            return

        self.axes = self.viewfig.add_subplot(111)
        self.axes.cla()
        for x, y in self.backend.getPlots(float(self.timeslider1.get())):
            self.axes.plot(x, y)
        self.canvas.draw()
        
    def scaleUpdated(self, event):
        self._job = self.after(200, self.updatePlots)
        


if __name__ == "__main__":
    app = view(None)
    app.title('IDEview')
    app.mainloop()

